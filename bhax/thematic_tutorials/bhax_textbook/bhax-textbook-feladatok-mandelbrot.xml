<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/blob/master/prog1/mandelpngt.cpp">https://github.com/DonatPataki/University/blob/master/prog1/mandelpngt.cpp</link>               
        </para>
<para>
A mandelbrot halmazt úgy tudjuk megkpani, hogy a komplex számsíkon azon komplex számokat akarjuk ábrázolni, amely komplex számok hossza egy adott szám. Így ennek megfelelően előbb létre kell hozni egy adott nagyszágú koordináta rendszert (vagy akármit amivel lehet azt reprezentálni) és annak origójából azon pontokat amelyekre az adott képlet alapján teljesül a kritérium azokat kiszinezünk a és a többit pedig nem változtatjuk.
</para>
<para>
Az alábbi kódcsipetben található a maga a forrás lényege.
</para>
<programlisting language='c'>
<![CDATA[    float a = -2.0, b = .7, c = -1.35, d = 1.35;
    int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

 
    float dx = (b - a) / szelesseg; //ezzel keressük meg az "x" tengely közepét
    float dy = (d - c) / magassag; //ez pedig az "y" tengely közepe
    float reC, imC, reZ, imZ, ujreZ, ujimZ;
  
    int iteracio = 0;
  
    for (int j = 0; j < magassag; ++j) // sor koordinátái
    {
  
        for (int k = 0; k < szelesseg; ++k) // oszlop koordinátái
        {
            reC = a + k * dx;
            imC = d - j * dy;
  
            reZ = 0;
            imZ = 0;
            iteracio = 0;
            while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar) //adott képletes rész
            {
  
                ujreZ = reZ * reZ - imZ * imZ + reC;
                ujimZ = 2 * reZ * imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;

                ++iteracio;

            }

            kepadat[j][k] = iteracio;
        }
    }]]>
</programlisting>
<para>
Ezután lementjük a pixelek mit kaptak, azaz annak megfelelő színűk lesz és majd kirajzolódik szép 600x600-as képben a mandelbrot halmaz.
</para>
<para>
Ezen kívűl még annyit tudok hozzáfűzni, hogy elég sok forrás/videó található ebből a témából, amit nem értek mivel annyira nem különleges eset számomra a mandelbrot halmaz. Mivel nem történik más mint hogy a komplex számsíkon ábrázoljuk azokat a komplex számok részhalmazát amire teljesűl a képletben megadott kritérium.
</para>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/blob/master/prog1/mandelcomp.cpp">https://github.com/DonatPataki/University/blob/master/prog1/mandelcomp.cpp</link>               
        </para>
<para>
Ugyanaz mint az előző feladat annyi eltéréssel, hogy használjuk a complex header alapján definiált típust. Egyébként a complex headerrel meglepő módon komplex számokat lehet reprezentálni float, double és long double formában.
</para>
<para>
Itt most simán a main függvénybe írtuk meg a mandelbrotos halmazt, ahol van valamennyni hibakezelés, ha rosszúl kapná mega paramétereket. Csak nem értem minek adtunk egyes elemeknek értékeket, ha pontosan 10 sorral lentebb úgyis azt adjuk hozzá, amit mi adtunk parancssori argumentuként. De mindegy. Ha esetleg nem jönne össze az a 9 argumentum akkor pedig kiírjuk, hogy hogyan is kell elindítani a programot.
</para>
<programlisting language='c'>
<![CDATA[  int szelesseg = 1920; //ettől
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3; //eddig nem sok értelme van mert ezeket az értékeket úgyis felűlíruk

  if ( argc == 9 ) //ha elegendő az argumentum
    {
      szelesseg = atoi ( argv[2] ); //akkor felülírjuk amit a felhasználó adott
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else //ha nem akkor szólunk hogy hogyan kéne elindítani
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
}]]>
</programlisting>
<para>
Most hogy ezen túl vagyunk akkor igazából elég hasonló a program.
</para>
<programlisting language='c'>
<![CDATA[  for ( int j = 0; j < magassag; ++j ) //sor oszlop iterációi
    {
      
      for ( int k = 0; k < szelesseg; ++k )
        {

      
          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar ) //ez kicsit rövidebb lett
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
}]]>
</programlisting>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/blob/master/prog1/biomorf.cpp">https://github.com/DonatPataki/University/blob/master/prog1/biomorf.cpp</link>
        </para>
<para>
Az a kevés információ alapján, amit találni lehet róla (feltéve hogy megfelelően keresetem rá) ez nem más mint egy nem megfelelően működő mandelbrot halmaz. Mivel van benne egy konstans tag. Feltalálójának amúgy az volt az alapvető elképzelése, hogy vizualizáció során gyorsabb fejlődést lehet elérni mint a nyers adatok bámulásával ezért például DNS részeket próbált vizualizálni. Gondolom innen jött később a biomorfok név.
</para>
<para>
Ennek az eleje eléggé hasonlít az előző meegoldáshoz. Csak most több értékkel fogunk dolgozni.
</para>
<programlisting language='c'>
<![CDATA[    int szelesseg = 1920; //adunk kezdőértéket de nem látom értelmét
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] ); //beolvasott értékeket rendejük hozzá
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else //ha nem jött össze a 12 argumentum akkor szólunk hogy hogyan kéne
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
}]]>
</programlisting>
<para>
Ezután szintén elkezdjük számolni.
</para>
<programlisting language='c'>
<![CDATA[    for ( int y = 0; y < magassag; ++y ) //sor
    {

        for ( int x = 0; x < szelesseg; ++x ) //oszlop
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));]]>
</programlisting>
<para>
Persze még adtunk hozzá egy kis apróságt is, ami minden iteráció után kiírja hogy hány %-nál tartunk ezután mentjük a képet és még azt is kiírjuk, hogy végzett.
</para>
<programlisting language='c'>
<![CDATA[      int szazalek = ( double ) y / ( double ) magassag * 100.0; //% számítás
        std::cout << "\r" << szazalek << "%" << std::flush; //kiírjuk hol járunk
    }

    kep.write ( argv[1] ); //mentjük
    std::cout << "\r" << argv[1] << " mentve." << std::endl; //jelezük hogy vége

}]]>
</programlisting>       
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/blob/master/prog1/mandel.cu">https://github.com/DonatPataki/University/blob/master/prog1/mandel.cu</link> 
        </para>
<para>
Szokásos mandelbrot halmaz azzal a különbséggel, hogy most az nvidia által fejlesztett cuda magokat használjuk. Ezek segítségével a feladatokat lehet párhuzamosítani, viszont cuda csak az nvidia grafikus kártyákban található. Használható c, c++ és fortran nyelveken. Leegyszerűsítve a cuda magok olyanok mint sok kis teljesítményű processzor.
</para>
<para>
Ez a kód egyértelműen az elsőből lett átdolgozva és így már értelmet nyert az, hogy miért nézzük mennyi ideig tart lefutattni. Mivel ez egy jól pérhuzamosítható folyamat így egyértelműen kijön majd a lineáris és párhuzamos folyamatvégzés időbeli különbsége.
</para>
<para>
Itt is külön eljárásban van a mandelbrotos halmaz létrehozása.
</para>
<programlisting language='c'>
<![CDATA[void
cudamandel (int kepadat[MERET][MERET])
{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int)); //gpu-n foglalunk helyet

  // dim3 grid (MERET, MERET);
  // mandelkernel <<< grid, 1 >>> (device_kepadat);
  
  dim3 grid (MERET / 10, MERET / 10); //dim3 cuda int vector típús, aminek nem muszáj mindhárom elemét megadni
  dim3 tgrid (10, 10); 
  mandelkernel <<< grid, tgrid >>> (device_kepadat); //szétosztjuk a feladatot 
  
  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost); //kivesszük a gpu memóriájából
  cudaFree (device_kepadat); //szabadítunk

}]]>
</programlisting>
<para>
Ezután elkezdünk számolni.
</para>
<programlisting language='c'>
<![CDATA[__global__ void
mandelkernel (int *kepadat)
{

  int tj = threadIdx.x;
  int tk = threadIdx.y;

  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k); //meghívja a függvényt ami kiszámolja

}]]>
</programlisting>
<para>
A lenti kódrész majdnem egy az egyben megegyezik az első feladatban látottal, csak most ez nem lineáris módon fut, ezért csak a két for ciklustól kellet megszabadúlni.
</para>
<programlisting language='c'>
<![CDATA[
__device__ int
mandel (int k, int j)
{

  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;


  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;

  int iteracio = 0;

  reC = a + k * dx;
  imC = d - j * dy;
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;
  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
  
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;

      ++iteracio;

    }
  return iteracio;
}]]>
</programlisting>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
            

        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/tree/master/prog1/Qt_mandelbrot">https://github.com/DonatPataki/University/tree/master/prog1/Qt_mandelbrot</link> 
        </para>
<para>
Még mindig mandelbrot most egy egyszerű kép helyett azonban lehet nagyítani és így a végtelenségig rajzolva a mandelbrot halmazt. Elég sok videó van erről, amik úgy néznek ki mint egy megkérdőjelezhető tudati állapotban lévő ember álma. De nyílván az én hozzáállásom volt rossz, mert azt hittem azért van ennyi mandelbrotos feladat mert ez annyira fontos és véletlen sem a változásokat egyszerű így észrevenni.
</para>
<para>
De inkább nézzük a kódot.
</para>
<programlisting language='c'>
<![CDATA[    QApplication a(argc, argv);
    // További adatokat olvashatsz le innen:
    // http://www.tankonyvtar.hu/informatika/javat-tanitok-2-3-080904
    FrakAblak w1,
    w2(-.08292191725019529, -.082921917244591272,
       -.9662079988595939, -.9662079988551173, 600, 3000),
    w3(-.08292191724880625, -.0829219172470933,
       -.9662079988581493, -.9662079988563615, 600, 4000),
    w4(.14388310361318304, .14388310362702217,
       .6523089200729396, .6523089200854384, 600, 38656);
    w1.show();
    w2.show();
    w3.show();
    w4.show();

return a.exec();]]>
</programlisting>
<para>
Lényegében csak ablakokat kérünk. Egy is elég lenne, nyílván azért van így mert vagy valami története vagy nem végleges verzió volt a forrás.
</para>
<para>
A lenti kódban nem történik sok izgalmas dolog, csak előkészítjük a terepet.
</para>
<programlisting language='c'>
<![CDATA[FrakAblak::FrakAblak(double a, double b, double c, double d,
                     int szelesseg, int iteraciosHatar, QWidget *parent)
                         : QMainWindow(parent)
{
    setWindowTitle("Mandelbrot halmaz");

    int magassag = (int)(szelesseg * ((d-c)/(b-a)));

    setFixedSize(QSize(szelesseg, magassag));
    fraktal= new QImage(szelesseg, magassag, QImage::Format_RGB32);

    mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
    mandelbrot->start(); //ez utóbbi két sor elég lényeges

}]]>
</programlisting>
<para>
És ez teszi lehetővé a nagyítást
</para>
<programlisting language='c'>
<![CDATA[void FrakAblak::paintEvent(QPaintEvent*) {
    QPainter qpainter(this);
    qpainter.drawImage(0, 0, *fraktal);
    qpainter.end();
}]]>
</programlisting>
<para>
A frakszal.cpp-n belűl ott van maga a számolás, de a kódot nem raknám be teljesen, mert már ennyi mandelbrotos feladat után rosszúl leszek. Úgyhogy csak a lénnyeget említeném benne.
</para>
<programlisting language='c'>
<![CDATA[FrakSzal::FrakSzal(double a, double b, double c, double d,
                   int szelesseg, int magassag, int iteraciosHatar, FrakAblak *frakAblak)
{
    this->a = a;
    this->b = b;
    this->c = c;
    this->d = d;
    this->szelesseg = szelesseg;
    this->iteraciosHatar = iteraciosHatar;
    this->frakAblak = frakAblak;
    this->magassag = magassag;

    egySor = new int[szelesseg];
}]]>
</programlisting>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
		Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/blob/master/prog1/mandelbrot.java">https://github.com/DonatPataki/University/blob/master/prog1/mandelbrot.java</link>
        </para>
<para>
Végre az utolsó mandelbrotos feladat. Szóval minden mellébeszélés nélkül essünk rajta túl minél hamarabb.
</para>
<para>
A main függvényben nem olyan nehéz elveszni, mert rögrtön megyünk is tovább adott paraméterekkel.
</para>
<programlisting language='java'>
<![CDATA[    public static void main(String[] args) {
        new MandelbrotHalmazNagyító(-2.0, .7, -1.35, 1.35, 600, 255);
}]]>
</programlisting>
<para>
Ezután az elábbi programrész hívódik meg
</para>
<programlisting language='java'>
<![CDATA[    public MandelbrotHalmazNagyító(double a, double b, double c, double d,
            int szélesség, int iterációsHatár) {

        super(a, b, c, d, szélesség, iterációsHatár);
        setTitle("A Mandelbrot halmaz nagyításai");

        addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent m) { //ez figyeli az egérgomb lenyomást
  
              x = m.getX();
                y = m.getY();
                mx = 0;
                my = 0;
                repaint();
            }

            public void mouseReleased(java.awt.event.MouseEvent m) { //újraszámol
                double dx = (MandelbrotHalmazNagyító.this.b
                        - MandelbrotHalmazNagyító.this.a)
                        /MandelbrotHalmazNagyító.this.szélesség;
                double dy = (MandelbrotHalmazNagyító.this.d
                        - MandelbrotHalmazNagyító.this.c)
                        /MandelbrotHalmazNagyító.this.magasság;
                
                new MandelbrotHalmazNagyító(MandelbrotHalmazNagyító.this.a+x*dx, //újraszámolt értékekkel új példányt hoz létre
                        MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
                        MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
                        MandelbrotHalmazNagyító.this.d-y*dy,
                        600,
                        MandelbrotHalmazNagyító.this.iterációsHatár);
            }
        });

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent m) { //figyeli a kijelölt területet
                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });
}]]>
</programlisting>
<para>
Továbbá még van egy rész, ahol a pillanatképek készülnek png formában, de azt nem tartom olyan izgalmasnak. Ennyi mandelbrotos feladat után nem igazán tudok újat hozzáfűzni, esetleg annyit, hogy maga a java elég olvasható különösebb tudás nélkül.
</para>
    </section>

</chapter>                
