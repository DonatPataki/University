<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/tree/master/prog1/hangyaszimulacio">https://github.com/DonatPataki/University/tree/master/prog1/hangyaszimulacio</link>               
        </para>
<figure>
<title>Forrás: https://bhaxor.blog.hu/2018/10/10/myrmecologist</title>
<mediaobject>
<imageobject>
<imagedata fileref="img/ulm.png" scale="80" />
</imageobject>
<textobject>
<phrase></phrase>
</textobject>
</mediaobject>
</figure>
<para>
Fordításához szükséges Qt telepítése. A program nem csinál mást mint a hangyák viselkedését próbálja szimulálni. Ezt úgy érhetjük el, hogy a képernyőt cellákra bontjuk és cellánként megkeresik a hangyák azt, akinek a "legerősebb a szaga" és abba az irányba indulnak el. A main.cpp-ben található egy ajánlott futattás kapcsolókkal együtt. Az alábbi kapcsolókkal a következőket tudjuk befolyásolni w a cella szélessége,  m a cellamagasság, n a hangyák száma, t az idő, p a párolgás mérétke, f a feromon értékének nagysága, s a szomszédos cellákban milyen erős szagot hagy, d a cellánkénti alapérték, a a maximális érték ami egy cellában lehet, i a minimális és a c kapcsolóval azt adhatjuk meg, hogy hány hangya fér bele egy cellába.
</para>
<programlisting language = 'c++'>
<![CDATA[void AntWin::paintEvent ( QPaintEvent* )
{
    QPainter qpainter ( this );

    grid = grids[gridIdx];

    for ( int i=0; i<height; ++i ) {
        for ( int j=0; j<width; ++j ) {

            double rel = 255.0/max;

            qpainter.fillRect ( j*cellWidth, i*cellHeight,    //kitölt
                                cellWidth, cellHeight,
                                QColor ( 255 - grid[i][j]*rel,
                                         255,
                                         255 - grid[i][j]*rel) );

            if ( grid[i][j] != min )
            {
                qpainter.setPen (     //színt állít
                    QPen (
                        QColor ( 255 - grid[i][j]*rel,
                                 255 - grid[i][j]*rel, 255),
                        1 )
                );

                qpainter.drawRect ( j*cellWidth, i*cellHeight, // razol
                                    cellWidth, cellHeight );
            }



            qpainter.setPen (
                QPen (
                    QColor (0,0,0 ),   //visszaállítja fehér színre
                    1 )
            );

            qpainter.drawRect ( j*cellWidth, i*cellHeight, //rajzol
                                cellWidth, cellHeight );

        }
    }

    for ( auto h: *ants) {
        qpainter.setPen ( QPen ( Qt::black, 1 ) ); //feketére állít majd hangyákat rajzol

        qpainter.drawRect ( h.x*cellWidth+1, h.y*cellHeight+1,
                            cellWidth-2, cellHeight-2 );

    }

    qpainter.end();
}]]>
</programlisting>
<para>
A fenti kódrész tartalmazza a rajzolásokat és színváltásokat.
</para>
<para>
Az antthread.cpp tartalmazza a hangyák viselkedését. Vagyis itt van a kóddrész ami változtatja példáúl a hangyák szag erősségének értéket, magának a hangyáknak számát a cellákban, az időt. 
</para>
<para>
Az ant.h-ban megtalálható magának a tulajdonságai, amit én első ránézésre nem tudom melyik pontosan melyik mivel ezek nem beszédes nevek. De van egy érték, amit a konstruktor hoz létre és az random.
</para>            
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/blob/master/prog1/life.java">https://github.com/DonatPataki/University/blob/master/prog1/life.java</link>               
        </para>
<para>
John Horton életjátékának java verziója, ami az általa megadott egyszerű szabályokra épül.
</para>
<para>
A program úgy néz ki, hogy a main függvényen belűl létrehozunk egy példányát a game_of_life osztálynak, ami maga a játékot tartallmaza. Itt az is megfigyelhető, hogy a játékot valószíűleg a konsolban tervezték el, mert minden iterációban elküldjük 200 ms-re pihenni. Illetve az is  esélyes ebből, hogy a class előre megadott módokon módosít mindenen, és egy játékostól vár majd inputot.
</para>
<programlisting language = 'c++'>
<![CDATA[    public static void main(String args[])
    {
        game_of_life gol = new game_of_life();
        while(gol.ra.running)
        {
            if(!gol.ra.edit_mode)gol.update();
            try{Thread.sleep(200);}
            catch(Exception ex)
            {

            }
            gol.ra.update(gol.ra.getGraphics());
        }
        gol.dispose();
}]]>
</programlisting>
<para>
Ezután a program lefutatja saját konstruktorát, ami eddig engem igazolt a tippemmel. Itt nem látszik semmi extra vagy nagyon különleges és semmi sem tűnik randomnak.
</para>
<programlisting language = 'c++'>
<![CDATA[    public game_of_life() {
        super("Game of Life");
        this.setSize(1005, 1030);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setVisible(true);
        this.setResizable(false);
        ra = new RenderArea();
        ra.setFocusable(true);
        ra.grabFocus();
        add(ra);
        int[][] siklokilovo = {{6,0},{6,1},
            {7,0},{7,1},
            {3,13},
            {4,12},{4,14},
            {5,11},{5,15},{5,16},{5,25},
            {6,11},{6,15},{6,16},{6,22},{6,23},{6,24},{6,25},
            {7,11},{7,15},{7,16},{7,21},{7,22},{7,23},{7,24},
            {8,12},{8,14},{8,21},{8,24},{8,34},{8,35},
            {9,13},{9,21},{9,22},{9,23},{9,24},{9,34},{9,35},
            {10,22},{10,23},{10,24},{10,25},
            {11,25}};
        int min_o = 5;
        int min_s = 85;
        for (int i = 0; i < siklokilovo.length; ++i)
        {
          ra.entities.get(min_o + siklokilovo[i][1]).set(min_s+ siklokilovo[i][0],!ra.entities.get(min_o + siklokilovo[i][1]).get((min_s+ siklokilovo[i][0])));
                this.update(this.getGraphics());  
        }
        

        ra.edit_mode = false;
        ra.running = true;
}]]>
</programlisting>
<para>
Ezen kívűl egy pár dolog megtalálható benne. Példáúl egy update eljárás, ami  az enitiken végez módosításokat, annak megvelelően, hogy milyen kondició teljesűl. A forráskódját ennek most nem raknám be ide, mert nem akarom, hogy az egész könyv csak kód legyen és olyan sokat nem mond elsőre maga a kód.
</para>
<para>
Ezen kívűl van még néhány keyevent figyelő és egy programrész, ami a rajzolást végzi.
</para>            
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/tree/master/prog1/eletjatek">https://github.com/DonatPataki/University/tree/master/prog1/eletjatek</link>               
        </para>
<para>
John Horton Conway brit matematikus állt elő ezzel az ötlettel 1970-ben. A játék nem igényel inputot egy játékostól sem, mivel önmagát konfigurálja és megpróbálja a legjobb lövést végrehajtani. Van néhány szabálya a játéknak mint például akármelyik élő sejt meghal kevesebb mint két élő szomszéddal stb. Alapvetően három kategóriája van a játékban szereplő dolgoknak. Still lifes, amik nem csinálnak semmit se. Oscillators, amik visszatérnek eredeti alakjukhoz, adott lépésszám után. Valamint Spaceships, amik mozogni tudnak. Kb ez a lényegi része a Conway féle életjátéknak és a program ezen alapszik.
</para>
<para>
Létrehozzuk egy ablakot Qt-val.           
</para>
<programlisting language = 'c++'>
<![CDATA[int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    SejtAblak w(100, 75);
    w.show();

    return a.exec();
}]]>
</programlisting>
<para>
A sejtablak.cpp-ben már található izgalmasabb dolog, mint példáúl maga a rajzolást végző egység. De itt vannak megadva a siklókilövő koordinátái + a siklóé is bár ahogy látom azok a koordináták x és y-hoz képest lesznek viszonyítva. Valamint még itt található egy update is.
</para>
<programlisting language = 'c++'>
<![CDATA[void SejtAblak::paintEvent(QPaintEvent*) {
    QPainter qpainter(this);

    // Az aktuális
    bool **racs = racsok[racsIndex];
    // racsot rajzoljuk ki:
    for(int i=0; i<magassag; ++i) { // végig lépked a sorokon
        for(int j=0; j<szelesseg; ++j) { // s az oszlopok
            // Sejt cella kirajzolása
            if(racs[i][j] == ELO)
                qpainter.fillRect(j*cellaSzelesseg, i*cellaMagassag,
                                  cellaSzelesseg, cellaMagassag, Qt::black);
            else
                qpainter.fillRect(j*cellaSzelesseg, i*cellaMagassag,
                                  cellaSzelesseg, cellaMagassag, Qt::white);
            qpainter.setPen(QPen(Qt::gray, 1));

            qpainter.drawRect(j*cellaSzelesseg, i*cellaMagassag,
                              cellaSzelesseg, cellaMagassag);
        }
    }

    qpainter.end();
}]]>
</programlisting>
<para>
A sejtszal.cpp-n belűl találtható a funkció, ami megadja hogy hány szomszédos élő egység van. Ez azért fontos mert van egy olyan szabály, ami megadja, hogy mennyi szomszédos egység után számít valami halottnak.
</para>
<programlisting language = 'c++'>
<![CDATA[
int SejtSzal::szomszedokSzama(bool **racs,
                              int sor, int oszlop, bool allapot) {
    int allapotuSzomszed = 0;
    // A nyolcszomszédok végigzongorázása:
    for(int i=-1; i<2; ++i)
        for(int j=-1; j<2; ++j)
            // A vizsgált sejtet magát kihagyva:
            if(!((i==0) && (j==0))) {
        // A sejttérbõl szélének szomszédai
        // a szembe oldalakon ("periódikus határfeltétel")
        int o = oszlop + j;
        if(o < 0)
            o = szelesseg-1;
        else if(o >= szelesseg)
            o = 0;

        int s = sor + i;
        if(s < 0)
            s = magassag-1;
        else if(s >= magassag)
            s = 0;

        if(racs[s][o] == allapot)
            ++allapotuSzomszed;
    }

    return allapotuSzomszed;
}]]>
</programlisting>
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/DonatPataki/University/tree/master/prog1/BrainB">https://github.com/DonatPataki/University/tree/master/prog1/BrainB</link>               
        </para>
<para>
Mivel manapság mindenki e-sportoló akar lenni, ez a teszt fázisban lévő program megpróbálja megbecsülni az emberek szellemi teljesítményét vagyis inkább, hogy mennyire képes több zavaró tényező között a saját karakterét követni, így elérve azt, hogy az adott személy alkalmas-e e-sportolónak vagy sem. Ezt úgy éri el, hogy több mozgó karakter közül olyan statisztikákat figyel, mint hogy hányszor veszítí szem elől a saját karakterét, mennyi ideig tart megtalálni stb. Majd kap egy összesített pontszámot, ami vagy jó vagy nem. Viszont ennek a pontnak még nem látszik túl sok értelme, mivel nincs bizonyítva, hogy ez egy működő koncepció vagy sem. Legalábbis én ezt az iinforméciót kaptam.
</para>
<para>
Mivel ez egy kutatás része ezért van hozzá dokumentáció, aminek köszönhetően sokkal több mindent meglehet tudni ezzel kapcsolatban írni. De én csak egy egyszerű halandó vagyok, aki megpróbállja értelmezni a kódot és a dokumentáció olvasása nélkül. 
</para>
<para>
Első ránézésre is vannak elég egyszerúen kivehető részek, hogy mi mit csinál a kódban. Ilyen példáúl a hősök mozgása, ami teljesen random.
</para>
<programlisting language = 'c++'>
<![CDATA[BrainBThread::BrainBThread ( int w, int h )
{

        dispShift = heroRectSize+heroRectSize/2;

        this->w = w - 3 * heroRectSize;
        this->h = h - 3 * heroRectSize;

        std::srand ( std::time ( 0 ) );

        Hero me ( this->w / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100,
                  this->h / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100, 255.0 * std::rand() / ( RAND_MAX + 1.0 ), 9 );

        Hero other1 ( this->w / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100,
                      this->h / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100, 255.0 * std::rand() / ( RAND_MAX + 1.0 ), 5, "Norbi Entropy" );
        Hero other2 ( this->w / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100,
                      this->h / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100, 255.0 * std::rand() / ( RAND_MAX + 1.0 ), 3, "Greta Entropy" );
        Hero other4 ( this->w / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100,
                      this->h / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100, 255.0 * std::rand() / ( RAND_MAX + 1.0 ), 5, "Nandi Entropy" );
        Hero other5 ( this->w / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100,
                      this->h / 2 + 200.0 * std::rand() / ( RAND_MAX + 1.0 ) - 100, 255.0 * std::rand() / ( RAND_MAX + 1.0 ), 7, "Matyi Entropy" );

        heroes.push_back ( me );
        heroes.push_back ( other1 );
        heroes.push_back ( other2 );
        heroes.push_back ( other4 );
        heroes.push_back ( other5 );

}]]>
</programlisting>
<para>
Van még pár könnyen kivehtő dolog, mint a billentyű/egéresemények, a statiszika része stb. De itt már érződik, hogy ez több időt igényel a megértéshez.
</para>            
    </section>        

</chapter>                
